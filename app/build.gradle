apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

def flatDirLibs = ['../../Android-Libraries-For-Development']
//def flatDirLibs = ['../../Android-Libraries-For-Development-ProGuard']

repositories {
    flatDir {
        dirs flatDirLibs
    }
}

ext{
    recyclerview_version = "1.2.0-alpha04"
    core_ktx_version = "1.3.0"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = rootProject.name + ".aar"
        }
    }

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        local {
            initWith debug
        }
    }

    lintOptions {
        textReport true
        abortOnError false
        textOutput 'stdout'
        fatal 'UnusedResources'
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.FlowPreview"
        ]
    }


    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    configurations{
        implementation.exclude module: "proto-google-common-protos"
        implementation.exclude module: "protolite-well-known-types"
        implementation.exclude module: "protobuf-lite"
        implementation.exclude group: "org.jetbrains.kotlin", module: "kotlin-reflect"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"
}
